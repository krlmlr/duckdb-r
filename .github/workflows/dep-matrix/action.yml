name: "Actions to compute a matrix with all dependent packages"
outputs:
  matrix:
    description: "Generated matrix"
    value: ${{ steps.set-matrix.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - id: set-matrix
      run: |
        # Determine package dependencies
        # From remotes
        read_dcf <- function(path) {
          fields <- colnames(read.dcf(path))
          as.list(read.dcf(path, keep.white = fields)[1, ])
        }

        re_match <- function(text, pattern, perl = TRUE, ...) {

          stopifnot(is.character(pattern), length(pattern) == 1, !is.na(pattern))
          text <- as.character(text)

          match <- regexpr(pattern, text, perl = perl, ...)

          start  <- as.vector(match)
          length <- attr(match, "match.length")
          end    <- start + length - 1L

          matchstr <- substring(text, start, end)
          matchstr[ start == -1 ] <- NA_character_

          res <- data.frame(
            stringsAsFactors = FALSE,
            .text = text,
            .match = matchstr
          )

          if (!is.null(attr(match, "capture.start"))) {

            gstart  <- attr(match, "capture.start")
            glength <- attr(match, "capture.length")
            gend    <- gstart + glength - 1L

            groupstr <- substring(text, gstart, gend)
            groupstr[ gstart == -1 ] <- NA_character_
            dim(groupstr) <- dim(gstart)

            res <- cbind(groupstr, res, stringsAsFactors = FALSE)
          }

          names(res) <- c(attr(match, "capture.names"), ".text", ".match")
          class(res) <- c("tbl_df", "tbl", class(res))
          res
        }

        dev_split_ref <- function(x) {
          re_match(x, "^(?<pkg>[^@#]+)(?<ref>[@#].*)?$")
        }

        find_dev_dep <- function(package) {
          # FIXME: Improve detection, avoid hardcode
          # Upstream WONTFIX: https://github.com/r-lib/remotes/issues/576
          switch(package,
            arrow = return("apache/arrow-nanoarrow/r"),
            # FIXME: Remove for duckdb >= 0.9.0
            duckdb = return("duckdb/duckdb-r"),
            nanoarrow = return("apache/arrow-nanoarrow/r"),
            logging = return("WLOGSolutions/r-logging/pkg"),
            NULL
          )

          cran_url <- "https://cloud.r-project.org"

          refs <- dev_split_ref(package)
          url <- file.path(cran_url, "web", "packages", refs[["pkg"]], "DESCRIPTION")

          f <- tempfile()
          on.exit(unlink(f))

          utils::download.file(url, f)
          desc <- read_dcf(f)

          url_fields <- c(desc$URL, desc$BugReports)

          if (length(url_fields) == 0) {
            msg <- paste0("No development dependency for ", package)
            writeLines(paste0("::warning::", msg))
            return(NA_character_)
          }

          pkg_urls <- unlist(strsplit(url_fields, "[[:space:]]*,[[:space:]]*"))

          # Remove trailing "/issues" from the BugReports URL
          pkg_urls <- sub("/issues$", "", pkg_urls)

          valid_domains <- c("github[.]com", "gitlab[.]com")

          parts <-
            re_match(pkg_urls,
              sprintf("^https?://(?<domain>%s)/(?<username>%s)/(?<repo>%s)(?:/(?<subdir>%s))?",
                domain = paste0(valid_domains, collapse = "|"),
                username = "[^/]+",
                repo = "[^/@#]+",
                subdir = "[^/@$ ]+"
              )
            )[c("domain", "username", "repo", "subdir")]

          # Remove cases which don't match and duplicates

          parts <- unique(stats::na.omit(parts))

          if (nrow(parts) != 1) {
            NA_character_
          } else if (parts$domain == "gitlab.com") {
            paste0("gitlab::", parts$username, "/", parts$repo)
          } else {
            paste0(parts$username, "/", parts$repo)
          }
        }

        if (!requireNamespace("desc", quietly = TRUE)) {
          install.packages("desc")
        }

        deps_df <- desc::desc_get_deps()
        deps_df <- deps_df[deps_df$type %in% c("Depends", "Imports", "LinkingTo", "Suggests"), ]

        packages <- sort(deps_df$package)
        packages <- intersect(packages, rownames(available.packages()))
        packages <- c("arrow", "nanoarrow")

        dev_dep <- vapply(stats::setNames(nm = packages), find_dev_dep, character(1))
        deps <- dev_dep[!is.na(dev_dep)]

        if (length(deps) == 0) {
          msg <- paste0(
            "Could not determine development repository for packages: ",
            paste(packages[!valid_dev_dep], collapse = ", ")
          )
          writeLines(paste0("::warning::", msg))
          json <- paste0(
            '{"package":[]}'
          )
        } else {
          json <- paste0(
            '{"package":[',
            paste0('{"name": "', names(deps), '", "source": "', deps, '"}', collapse = ","),
            ']}'
          )
        }

        writeLines(json)
        writeLines(paste0("matrix=", json), Sys.getenv("GITHUB_OUTPUT"))
      shell: Rscript {0}
